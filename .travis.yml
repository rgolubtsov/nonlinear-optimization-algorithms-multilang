#
# .travis.yml
# =============================================================================
# Nonlinear Optimization Algorithms Multilang. Version 0.1
# =============================================================================
# Nonlinear programming algorithms as the (un-)constrained minimization
# problems with the focus on their numerical expression using various
# programming languages.
#
# This is the configuration of the project characteristics
# used by the Travis CI (continuous integration) service
# to rebuild the project on every push and pull request.
#

%YAML 1.1
---

language: generic

os:       linux

dist:     xenial

before_install:
    - sudo apt-get update

    ##
    # Installing the GNUstep Base-dev package and deps
    # to build the Objective-C 2.0 impl.
    - sudo apt-get install libgnustep-base-dev

    ##
    # Installing the GNU Fortran 95 compiler
    # to build FORTRAN 77 and Fortran 95 impls.
    - sudo apt-get install gfortran

    ## Installing the Vala compiler to build the Vala impl.
    - sudo apt-get install valac

script:
    ## Querying the system for characteristics and available resources.
    - cat /proc/cpuinfo | grep name && echo
                                    && uname -a
                                    && echo
                                    && df -h
                                    && echo
                                    && free

    ## TODO: Building all the packages under unconstrained-cli.
    - cd nlp-unconstrained-cli && ls -al

    ## TODO: Building all the packages for hooke-jeeves.
    - cd hooke-jeeves && ls -al

    ##
    # Building the original Hooke and Jeeves alg
    # as the traditional (K&R) C impl.
    - cd __orig && ls -al
                && make clean
                && make clean
                && ls -al
                && make all
                && make all
                && ls -al
                && ls -al bin obj src
                && ls -al

    ## Returning to the previous working dir.
    - cd - && ls -al

    ## Building the Hooke and Jeeves alg as the ISO C (C99) impl.
    - cd c && ls -al
           && make clean
           && make clean
           && ls -al
           && make all
           && make all
           && ls -al
           && ls -al bin obj src
           && ls -al

    ## Returning to the previous working dir.
    - cd - && ls -al

    ## Building the Hooke and Jeeves alg as the ISO C++ (C++98) impl.
    - cd cc && ls -al
            && make clean
            && make clean
            && ls -al
            && make all
            && make all
            && ls -al
            && ls -al bin obj src
            && ls -al

    ## Returning to the previous working dir.
    - cd - && ls -al

    ## Building the Hooke and Jeeves alg as the Objective-C 2.0 impl.
    - cd objc && ls -al
              && make clean
              && make clean
              && ls -al
              && make all
              && make all
              && ls -al
              && ls -al bin obj src
              && ls -al

    ## Returning to the previous working dir.
    - cd - && ls -al

    ## Building the Hooke and Jeeves alg as the FORTRAN 77 (MIL-STD 1753) impl.
    - cd f77 && ls -al
             && make clean
             && make clean
             && ls -al
             && make all
             && make all
             && ls -al
             && ls -al bin obj src
             && ls -al

    ## Returning to the previous working dir.
    - cd - && ls -al

    ## Building the Hooke and Jeeves alg as the ISO Fortran 95 impl.
    - cd f95 && ls -al
             && make clean
             && make clean
             && ls -al
             && make all
             && make all
             && ls -al
             && ls -al bin obj src
             && ls -al

    ## Returning to the previous working dir.
    - cd - && ls -al

    ## Building the Hooke and Jeeves alg as the Perl 5 (5.10+) impl.
    - cd perl && ls -al
              && make clean
              && make clean
              && ls -al
              && make all
              && make all
              && ls -al
              && ls -al bin lib src
              && ls -al

    ## Returning to the previous working dir.
    - cd - && ls -al

    ## Building the Hooke and Jeeves alg as the JavaScript (ECMA-262 5.1) impl.
    - cd js && ls -al
            && make clean
            && make clean
            && ls -al
            && make all
            && make all
            && ls -al
            && ls -al bin lib src
            && ls -al

    ## Returning to the previous working dir.
    - cd - && ls -al

    ## Building the Hooke and Jeeves alg as the Java (Java SE 7) impl.
    - cd java && ls -al
              && make clean
              && make clean
              && ls -al
              && make all
              && make all
              && ls -al
              && ls -al bin lib src
              && ls -al

    ## Returning to the previous working dir.
    - cd - && ls -al

    ## Building the Hooke and Jeeves alg as the Go impl.
    - cd go && ls -al
            && make clean
            && make clean
            && ls -al
            && make all
            && make all
            && ls -al
            && ls -al bin obj src
            && ls -al

    ## Returning to the previous working dir.
    - cd - && ls -al

    ## Building the Hooke and Jeeves alg as the Python 3 impl.
    - cd python && ls -al
                && make clean
                && make clean
                && ls -al
                && make all
                && make all
                && ls -al
                && ls -al bin lib src
                && ls -al

    ## Returning to the previous working dir.
    - cd - && ls -al

    ## Building the Hooke and Jeeves alg as the Vala impl.
    - cd vala && ls -al
              && make clean
              && make clean
              && ls -al
              && make all
              && make all
              && ls -al
              && ls -al bin src
              && ls -al

    ## Returning to the previous working dir.
    - cd - && ls -al

    ## Going one level up.
    - cd .. && ls -al

    ## TODO: Building all the packages for nelder-mead.
    - cd nelder-mead && ls -al

    ##
    # Building the original Nelder-Mead alg
    # as the FORTRAN 77 (MIL-STD 1753) impl.
    - cd __orig && ls -al
                && make clean
                && make clean
                && ls -al
                && make all
                && make all
                && ls -al
                && ls -al bin obj src
                && ls -al

    ## Returning to the previous working dir.
    - cd - && ls -al

    ## Building the Nelder-Mead alg as the ISO C (C99) impl.
    - cd c && ls -al
           && make clean
           && make clean
           && ls -al
           && make all
           && make all
           && ls -al
           && ls -al bin obj src
           && ls -al

    ## Returning to the previous working dir.
    - cd - && ls -al

...

# vim:set nu et ts=4 sw=4:
